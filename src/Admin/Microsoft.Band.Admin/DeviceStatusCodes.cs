// Decompiled with JetBrains decompiler
// Type: Microsoft.Band.Admin.DeviceStatusCodes
// Assembly: Microsoft.Band.Admin, Version=1.3.31002.2, Culture=neutral, PublicKeyToken=null
// MVID: 366705DD-0763-47F9-B6A9-5EDF88598091
// Assembly location: D:\Documents\REProj\MicrosoftBand\HealthApp.WindowsPhone_1.3.31002.2_ARM\Microsoft.Band.Admin.dll

namespace Microsoft.Band.Admin
{
    public static class DeviceStatusCodes
    {
        internal static uint Success = DeviceStatusCodeUtils.Success;
        internal static uint DmaPending = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriversBase, (ushort)0);
        internal static uint DmaChannelBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriversBase, (ushort)0);
        internal static uint DmaNoChanInit = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriversBase, (ushort)1);
        internal static uint DmaOddSourceAddr = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriversBase, (ushort)2);
        internal static uint DmaOddDestAddr = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriversBase, (ushort)3);
        internal static uint DmaOddByteCount = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriversBase, (ushort)4);
        internal static uint DmaDestBusErr = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriversBase, (ushort)5);
        internal static uint DmaSourceBusErr = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriversBase, (ushort)6);
        internal static uint DmaOddSgaAddr = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriversBase, (ushort)7);
        internal static uint DmaCiterErr = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriversBase, (ushort)8);
        internal static uint DmaDoffErr = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriversBase, (ushort)9);
        internal static uint DmaSoffErr = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriversBase, (ushort)10);
        internal static uint DmaCancelled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriversBase, (ushort)11);
        internal static uint DmaUnknown = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriversBase, (ushort)12);
        internal static uint DmaBadChannel = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriversBase, (ushort)13);
        internal static uint DmaBadMuxIndex = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriversBase, (ushort)14);
        internal static uint DmaBadSourceType = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriversBase, (ushort)15);
        internal static uint DmaBadDestType = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriversBase, (ushort)16);
        internal static uint DmaByteCountTooHigh = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriversBase, (ushort)17);
        internal static uint DisplayMissingDisplay = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverDisplay, (ushort)0);
        internal static uint DisplayAlreadyInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverDisplay, (ushort)1);
        internal static uint DisplayInvalidPowerTransition = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverDisplay, (ushort)2);
        internal static uint DisplayIsOff = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverDisplay, (ushort)3);
        internal static uint DisplayBltPending = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverDisplay, (ushort)4);
        internal static uint DisplayDmaInProgress = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverDisplay, (ushort)5);
        internal static uint DisplayTearingEffectIsrWithBlt = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverDisplay, (ushort)6);
        internal static uint DisplayTearingEffectIsrWithoutBlt = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverDisplay, (ushort)7);
        internal static uint BtleResetFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverBtle, (ushort)0);
        internal static uint BtleGpioInitFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverBtle, (ushort)1);
        internal static uint BtleInvalidArg = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverBtle, (ushort)2);
        internal static uint BtleSetRftx = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverBtle, (ushort)3);
        internal static uint BtleNoResponse = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverBtle, (ushort)4);
        internal static uint BtleUartTxTimeout = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverBtle, (ushort)5);
        internal static uint BtleUartRxTimeout = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverBtle, (ushort)6);
        internal static uint BtleStackInitFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverBtle, (ushort)7);
        internal static uint PdbInvalidParam = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverPdb, (ushort)0);
        internal static uint PdbNotInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverPdb, (ushort)1);
        internal static uint PdbAlreadyInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverPdb, (ushort)2);
        internal static uint PdbNotEnabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverPdb, (ushort)3);
        internal static uint PdbSequenceError = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverPdb, (ushort)4);
        internal static uint AdcCalibrationError = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAdc, (ushort)0);
        internal static uint AdcModuleBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAdc, (ushort)1);
        internal static uint AdcConversationStarted = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAdc, (ushort)2);
        internal static uint AdcReadyForTrigger = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAdc, (ushort)3);
        internal static uint AdcConversationComplete = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAdc, (ushort)4);
        internal static uint AdcInitComplete = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAdc, (ushort)5);
        internal static uint I2cTransactionPending = DeviceStatusCodeUtils.MakeStatus(false, Facility.DriverI2c, (ushort)0);
        internal static uint I2cNackReceived = DeviceStatusCodeUtils.MakeStatus(true, Facility.DriverI2c, (ushort)1);
        internal static uint I2cArbitrationLost = DeviceStatusCodeUtils.MakeStatus(true, Facility.DriverI2c, (ushort)2);
        internal static uint I2cClockHoldTimeout = DeviceStatusCodeUtils.MakeStatus(true, Facility.DriverI2c, (ushort)3);
        internal static uint I2cEnqueueBadModule = DeviceStatusCodeUtils.MakeStatus(true, Facility.DriverI2c, (ushort)4);
        internal static uint I2cEnqueueUninitialized = DeviceStatusCodeUtils.MakeStatus(true, Facility.DriverI2c, (ushort)5);
        internal static uint I2cEnqueueNullBuffer = DeviceStatusCodeUtils.MakeStatus(true, Facility.DriverI2c, (ushort)6);
        internal static uint I2cEnqueueReadHasZeroSize = DeviceStatusCodeUtils.MakeStatus(true, Facility.DriverI2c, (ushort)7);
        internal static uint I2cEnqueueDuplicateTransaction = DeviceStatusCodeUtils.MakeStatus(true, Facility.DriverI2c, (ushort)8);
        internal static uint I2cTransactionTimeout = DeviceStatusCodeUtils.MakeStatus(true, Facility.DriverI2c, (ushort)9);
        internal static uint I2cNotSupported = DeviceStatusCodeUtils.MakeStatus(true, Facility.DriverI2c, (ushort)10);
        internal static uint I2cNullTransaction = DeviceStatusCodeUtils.MakeStatus(true, Facility.DriverI2c, (ushort)11);
        internal static uint I2cEnqueueNullTransaction = DeviceStatusCodeUtils.MakeStatus(true, Facility.DriverI2c, (ushort)12);
        internal static uint I2cTransactionCorrupted = DeviceStatusCodeUtils.MakeStatus(true, Facility.DriverI2c, (ushort)13);
        internal static uint I2cBusUnrecoverable = DeviceStatusCodeUtils.MakeStatus(true, Facility.DriverI2c, (ushort)14);
        internal static uint GpioInvalidSignal = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverGpio, (ushort)0);
        internal static uint GpioInvalidAlternate = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverGpio, (ushort)1);
        internal static uint GpioTooManyInterrupts = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverGpio, (ushort)2);
        internal static uint GpioInvalidInterruptFlag = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverGpio, (ushort)3);
        internal static uint GpioPortFilterConflict = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverGpio, (ushort)4);
        internal static uint GpioSignalFilterUnavailable = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverGpio, (ushort)5);
        internal static uint MotorModuleBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverMotor, (ushort)0);
        internal static uint MotorPowerLevelLow = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverMotor, (ushort)1);
        internal static uint DacNotInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverDac, (ushort)1);
        internal static uint DacAlreadyInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverDac, (ushort)2);
        internal static uint DacVrefError = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverDac, (ushort)3);
        internal static uint RtcNullArgument = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverRtc, (ushort)0);
        internal static uint RtcInvalidTime = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverRtc, (ushort)1);
        internal static uint RtcTimeSyncDisabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverRtc, (ushort)2);
        internal static uint AnalogMgrModuleBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAnalogMgr, (ushort)0);
        internal static uint AnalogMgrInitialized = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAnalogMgr, (ushort)1);
        internal static uint AnalogMgrInitializationStarted = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAnalogMgr, (ushort)2);
        internal static uint AnalogMgrDeinitialized = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAnalogMgr, (ushort)3);
        internal static uint AnalogMgrNotInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAnalogMgr, (ushort)4);
        internal static uint AnalogMgrWriteCountInvalid = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAnalogMgr, (ushort)5);
        internal static uint AnalogMgrReadCountInvalid = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAnalogMgr, (ushort)6);
        internal static uint AnalogMgrWriteStarted = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAnalogMgr, (ushort)7);
        internal static uint AnalogMgrWriteSuccessful = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAnalogMgr, (ushort)8);
        internal static uint AnalogMgrReadStarted = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAnalogMgr, (ushort)9);
        internal static uint AnalogMgrReadSuccessful = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAnalogMgr, (ushort)10);
        internal static uint AnalogMgrSubscribed = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAnalogMgr, (ushort)11);
        internal static uint AnalogMgrSubscriptionDataValid = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAnalogMgr, (ushort)12);
        internal static uint AnalogMgrResetAlert = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAnalogMgr, (ushort)13);
        internal static uint AnalogMgrBootloaderModeAlert = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAnalogMgr, (ushort)14);
        internal static uint AnalogMgrNullParameter = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAnalogMgr, (ushort)15);
        internal static uint AnalogMgrWriteFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAnalogMgr, (ushort)16);
        internal static uint AnalogMgrReadFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAnalogMgr, (ushort)17);
        internal static uint AnalogMgrResetReasonUpdateSuccess = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAnalogMgr, (ushort)18);
        internal static uint AnalogMgrResetReasonUpdateFailure = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAnalogMgr, (ushort)19);
        internal static uint AnalogMgrBootloaderCommandWriteStageFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAnalogMgr, (ushort)20);
        internal static uint AnalogMgrBootloaderCommandReadStageFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAnalogMgr, (ushort)21);
        internal static uint AnalogMgrProgramFlashRowWriteStageFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAnalogMgr, (ushort)22);
        internal static uint AnalogMgrProgramFlashRowReadStageFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAnalogMgr, (ushort)23);
        internal static uint AnalogMgrVerifyFlashRowWriteStageFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAnalogMgr, (ushort)24);
        internal static uint AnalogMgrVerifyFlashRowReadStageFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAnalogMgr, (ushort)25);
        internal static uint AnalogMgrVerifyApplicationWriteStageFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAnalogMgr, (ushort)26);
        internal static uint AnalogMgrVerifyApplicationReadStageFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAnalogMgr, (ushort)27);
        internal static uint PmuInitialized = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverPmu, (ushort)0);
        internal static uint PmuInitializationFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverPmu, (ushort)1);
        internal static uint PmuWriteSynchronousCompleted = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverPmu, (ushort)2);
        internal static uint PmuWriteSynchronousFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverPmu, (ushort)3);
        internal static uint PmuReadSynchronousCompleted = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverPmu, (ushort)4);
        internal static uint PmuReadSynchronousFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverPmu, (ushort)5);
        internal static uint PmuNotInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverPmu, (ushort)6);
        internal static uint PmuUnitialized = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverPmu, (ushort)7);
        internal static uint PmuSetGpioCompleted = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverPmu, (ushort)8);
        internal static uint PmuSetCpioFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverPmu, (ushort)9);
        internal static uint PmuWriteAsynchronousCompleted = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverPmu, (ushort)10);
        internal static uint PmuWriteAsynchronousFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverPmu, (ushort)11);
        internal static uint PmuReadAsynchronousCompleted = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverPmu, (ushort)12);
        internal static uint PmuReadAsynchronousFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverPmu, (ushort)13);
        internal static uint PmuTransactionsLocked = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverPmu, (ushort)14);
        internal static uint PmuPowerLatchSucceeded = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverPmu, (ushort)15);
        internal static uint PmuPowerUnlatchSucceeded = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverPmu, (ushort)16);
        internal static uint PmuUnitTestPassed = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverPmu, (ushort)17);
        internal static uint PmuUnitTestFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverPmu, (ushort)18);
        internal static uint PmuSetGpioStarted = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverPmu, (ushort)19);
        internal static uint PmuSetChargeStateFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverPmu, (ushort)20);
        internal static uint AlsInitialized = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAls, (ushort)0);
        internal static uint AlsInitializationFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAls, (ushort)1);
        internal static uint AlsWriteSynchronousCompleted = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAls, (ushort)2);
        internal static uint AlsWriteSynchronousFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAls, (ushort)3);
        internal static uint AlsReadSynchrounousCompleted = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAls, (ushort)4);
        internal static uint AlsReadSynchrounousFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAls, (ushort)5);
        internal static uint AlsAlreadyInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAls, (ushort)6);
        internal static uint AlsUnitialized = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAls, (ushort)7);
        internal static uint AlsWriteAsynchronousCompleted = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAls, (ushort)8);
        internal static uint AlsWriteAsynchronousFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAls, (ushort)9);
        internal static uint AlsReadAsynchronousCompleted = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAls, (ushort)10);
        internal static uint AlsReadAsynchronousFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAls, (ushort)11);
        internal static uint AlsTransactionsLocked = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAls, (ushort)12);
        internal static uint AlsUnitTestPassed = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAls, (ushort)13);
        internal static uint AlsUnitTestFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAls, (ushort)14);
        internal static uint AlsNotPresent = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAls, (ushort)15);
        internal static uint AlsNotConfigured = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAls, (ushort)16);
        internal static uint AlsQueueFull = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAls, (ushort)17);
        internal static uint AlsWriteStarted = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAls, (ushort)18);
        internal static uint AlsWriteEnqueued = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAls, (ushort)19);
        internal static uint AlsReadBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAls, (ushort)20);
        internal static uint AlsReadEnqueued = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverAls, (ushort)21);
        internal static uint AlsDeprecatedRegister = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverAls, (ushort)22);
        internal static uint UartAsyncWritePending = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverUartAsync, (ushort)0);
        internal static uint UartAsyncWriteBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverUartAsync, (ushort)1);
        internal static uint UartAsyncBadBaudRate = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverUartAsync, (ushort)2);
        internal static uint UartAsyncZeroLength = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverUartAsync, (ushort)3);
        internal static uint UartAsyncDmaUnavailable = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverUartAsync, (ushort)4);
        internal static uint UartAsyncDmaTxIsrMiscall = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverUartAsync, (ushort)5);
        internal static uint UartAsyncTxChannelNotInit = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverUartAsync, (ushort)6);
        internal static uint UartAsyncTxDmaError = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverUartAsync, (ushort)7);
        internal static uint ExternalRamFailedVerification = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverExternalRam, (ushort)0);
        internal static uint FlexBusNullArgument = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverFlexBus, (ushort)0);
        internal static uint FlexBusBadCsRequested = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverFlexBus, (ushort)1);
        internal static uint FlexBusBadAddressRangeForAddress = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverFlexBus, (ushort)2);
        internal static uint FlexBusNotFlexBusAddress = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverFlexBus, (ushort)3);
        internal static uint FlexBusBusWidthNotAvailable = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverFlexBus, (ushort)4);
        internal static uint FlexBusWaitStatesTooLarge = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverFlexBus, (ushort)5);
        internal static uint FlexBusAddressSetupTimeTooLarge = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverFlexBus, (ushort)6);
        internal static uint FlexBusHoldTimeTooLarge = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverFlexBus, (ushort)7);
        internal static uint SpiOperationPending = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverSpi, (ushort)0);
        internal static uint SpiStructOverwritten = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverSpi, (ushort)1);
        internal static uint SpiMicTransactionInProgress = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverSpi, (ushort)2);
        internal static uint SpiMicNoTransactionInProgress = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverSpi, (ushort)3);
        internal static uint SpiMicTimeoutStop = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverSpi, (ushort)4);
        internal static uint EFlashPending = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverEFlash, (ushort)0);
        internal static uint EFlashSpiError0 = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverEFlash, (ushort)1);
        internal static uint EFlashBadJedecId0 = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverEFlash, (ushort)2);
        internal static uint EFlashBadJedecId1 = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverEFlash, (ushort)3);
        internal static uint EFlashBadJedecId2 = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverEFlash, (ushort)4);
        internal static uint EFlashTimeout = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverEFlash, (ushort)5);
        internal static uint EFlashBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverEFlash, (ushort)6);
        internal static uint EFlashUnableToWrite = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverEFlash, (ushort)7);
        internal static uint EFlashBadAddress = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverEFlash, (ushort)8);
        internal static uint EFlashBadSize = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverEFlash, (ushort)9);
        internal static uint EFlashWrError = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverEFlash, (ushort)10);
        internal static uint EFlashBadOperation = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverEFlash, (ushort)11);
        internal static uint EFlashSpiInitFail = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverEFlash, (ushort)20);
        internal static uint EFlashEraseCheckFail = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverEFlash, (ushort)21);
        internal static uint EFlashAddressConflict = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverEFlash, (ushort)22);
        internal static uint EFlashQueueEmpty = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverEFlash, (ushort)23);
        internal static uint EFlashStructAlreadyQueued = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverEFlash, (ushort)24);
        internal static uint EFlashNullStruct = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverEFlash, (ushort)25);
        internal static uint EFlashPageStraddled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverEFlash, (ushort)26);
        internal static uint EFlashNullCallback = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverEFlash, (ushort)27);
        internal static uint EFlashNullBuffer = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverEFlash, (ushort)28);
        internal static uint EFlashPowerUpFail = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverEFlash, (ushort)29);
        internal static uint CrcPending = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverCrc, (ushort)0);
        internal static uint CrcNotReady = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverCrc, (ushort)1);
        internal static uint CrcNullPointer = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverCrc, (ushort)2);
        internal static uint CrcZeroSize = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverCrc, (ushort)3);
        internal static uint PFlashProgramFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverPFlash, (ushort)0);
        internal static uint PFlashSectionProgramFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverPFlash, (ushort)1);
        internal static uint PFlashSectionEraseFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverPFlash, (ushort)2);
        internal static uint PFlashWriteFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverPFlash, (ushort)3);
        internal static uint PFlashAddressInvalid = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverPFlash, (ushort)4);
        internal static uint PFlashInvalid2Up = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverPFlash, (ushort)5);
        internal static uint PFlashResetReasonWriteComplete = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverPFlash, (ushort)6);
        internal static uint FpuInvalid = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverFpu, (ushort)0);
        internal static uint FpuInitialized = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverFpu, (ushort)1);
        internal static uint FpuInitializedFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverFpu, (ushort)1);
        internal static uint FpuUnitialized = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverFpu, (ushort)2);
        internal static uint FpuUnitializationFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverFpu, (ushort)2);
        internal static uint FpuEnabled = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverFpu, (ushort)3);
        internal static uint FpuNotEnabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverFpu, (ushort)3);
        internal static uint FpuDisabled = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverFpu, (ushort)4);
        internal static uint FpuNotDisabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverFpu, (ushort)4);
        internal static uint FpuCommandHandlersRegistered = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverFpu, (ushort)5);
        internal static uint TimeTimerNotGreaterThan = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverTimers, (ushort)0);
        internal static uint WatchdogInvalidTimeout = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverWatchDog, (ushort)0);
        internal static uint WatchdogDisabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverWatchDog, (ushort)1);
        internal static uint CoreModuleResetReasonUsbCommand = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverCoreModule, (ushort)0);
        internal static uint CoreModuleResetReasonSystemCrash = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.DriverCrashDump, (ushort)0);
        internal static uint MmcauInvalidBufferSize = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.DriverMmcau, (ushort)0);
        internal static uint BacklightDisabled = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryBacklight, (ushort)0);
        internal static uint BacklightPending = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryBacklight, (ushort)1);
        internal static uint BacklightBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBacklight, (ushort)2);
        internal static uint BatteryNotInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBattery, (ushort)0);
        internal static uint BatteryNotConfigured = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBattery, (ushort)1);
        internal static uint BatteryQueueFull = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBattery, (ushort)2);
        internal static uint BatteryWriteStarted = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryBattery, (ushort)3);
        internal static uint BatteryWriteSuccessful = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryBattery, (ushort)4);
        internal static uint BatterySubscriptionDataValid = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryBattery, (ushort)5);
        internal static uint BatteryWriteEnqueued = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryBattery, (ushort)6);
        internal static uint BatteryReadBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBattery, (ushort)7);
        internal static uint BatteryReadEnqueued = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryBattery, (ushort)8);
        internal static uint BatteryAlreadyInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBattery, (ushort)9);
        private static ushort DebugBase = 0;
        internal static uint DebugInitializeSucceeded = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibrariesBase, DeviceStatusCodes.DebugBase);
        internal static uint DebugInitializeFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrariesBase, DeviceStatusCodes.DebugBase);
        internal static uint DebugInitializeNoPrintProviders = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrariesBase, (ushort)((uint)DeviceStatusCodes.DebugBase + 1U));
        internal static uint DebugInitialized = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibrariesBase, (ushort)((uint)DeviceStatusCodes.DebugBase + 2U));
        internal static uint DebugNotInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrariesBase, (ushort)((uint)DeviceStatusCodes.DebugBase + 2U));
        private static ushort DebugOpBase = (ushort)((uint)DeviceStatusCodes.DebugBase + 256U);
        private static ushort DebugOpUartAsyncBase = (ushort)((uint)DeviceStatusCodes.DebugOpBase + 16U);
        private static ushort DebugOpItmBase = (ushort)((uint)DeviceStatusCodes.DebugOpBase + 32U);
        internal static uint DebugOpItmQueueApc = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrariesBase, DeviceStatusCodes.DebugBase);
        private static ushort DebugOpSubBase = (ushort)((uint)DeviceStatusCodes.DebugOpBase + 48U);
        internal static uint DebugOpSubQueueApc = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrariesBase, DeviceStatusCodes.DebugBase);
        private static ushort RuntimeBase = 0;
        internal static uint RuntimeInitializeSucceeded = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryRuntime, DeviceStatusCodes.RuntimeBase);
        internal static uint RuntimeInitializeFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryRuntime, (ushort)((uint)DeviceStatusCodes.RuntimeBase + 1U));
        private static ushort RuntimeKapcBase = 256;
        internal static uint RuntimeKapcNoNodes = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryRuntime, DeviceStatusCodes.RuntimeKapcBase);
        private static ushort RuntimeRingbufferBase = 512;
        internal static uint RuntimeRingbufferBytesNotPowerOfTwo = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryRuntime, DeviceStatusCodes.RuntimeRingbufferBase);
        internal static uint RuntimeRingbufferWriteOverflow = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryRuntime, (ushort)((uint)DeviceStatusCodes.RuntimeRingbufferBase + 1U));
        internal static uint RuntimeRingbufferReadOverflow = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryRuntime, (ushort)((uint)DeviceStatusCodes.RuntimeRingbufferBase + 2U));
        internal static uint UsbCmdProtocolSuccess = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryUsbCmdProtocol, (ushort)0);
        internal static uint UsbCmdProtocolBadCommand = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUsbCmdProtocol, (ushort)1);
        internal static uint UsbCmdProtocolUnknownCommand = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUsbCmdProtocol, (ushort)2);
        internal static uint UsbCmdProtocolFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUsbCmdProtocol, (ushort)3);
        internal static uint UsbCmdProtocolBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUsbCmdProtocol, (ushort)4);
        internal static uint UsbCmdProtocolOpenPipeInFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUsbCmdProtocol, (ushort)5);
        internal static uint UsbCmdProtocolOpenPipeOutFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUsbCmdProtocol, (ushort)6);
        internal static uint UsbCmdProtocolSendFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUsbCmdProtocol, (ushort)7);
        internal static uint UsbCmdProtocolReceiveFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUsbCmdProtocol, (ushort)8);
        internal static uint UsbCmdProtocolInvalidDevice = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUsbCmdProtocol, (ushort)9);
        internal static uint UsbCmdProtocolExceededListSize = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUsbCmdProtocol, (ushort)10);
        internal static uint UsbCmdProtocolInvalidBuffer = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUsbCmdProtocol, (ushort)11);
        internal static uint UsbCmdProtocolNoData = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUsbCmdProtocol, (ushort)12);
        internal static uint UsbCmdProtocolPendingWait = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUsbCmdProtocol, (ushort)13);
        internal static uint UsbCmdProtocolSendIncomplete = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUsbCmdProtocol, (ushort)14);
        internal static uint UsbCmdProtocolHandlerInProgress = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUsbCmdProtocol, (ushort)15);
        internal static uint UsbCmdProtocolTimeout = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUsbCmdProtocol, (ushort)16);
        internal static uint UsbCmdProtocolCmdDoesNotExist = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUsbCmdProtocol, (ushort)17);
        internal static uint UsbCmdProtocolCmdIsTimedOut = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUsbCmdProtocol, (ushort)18);
        internal static uint UsbCmdProtocolIsNotAValidCmdPacket = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUsbCmdProtocol, (ushort)19);
        internal static uint JutilSuccess = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryJutil, (ushort)0);
        internal static uint JutilFailedInternalMemoryAllocation = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryJutil, (ushort)1);
        internal static uint JutilNoConnectedDevices = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryJutil, (ushort)2);
        internal static uint JutilFailedToGetDevicePath = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryJutil, (ushort)3);
        internal static uint JutilNoMoreDevicesDetected = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryJutil, (ushort)4);
        internal static uint JutilInvalidDevicePathFromInternalBuffer = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryJutil, (ushort)5);
        internal static uint JutilCorruptedInternalList = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryJutil, (ushort)6);
        internal static uint JutilFailedCallbackInvocation = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryJutil, (ushort)7);
        internal static uint JutilCommunicationFailure = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryJutil, (ushort)8);
        internal static uint JutilInvalidHandle = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryJutil, (ushort)9);
        internal static uint JutilNullHandle = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryJutil, (ushort)10);
        internal static uint JutilInsufficientBufferAlloc = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryJutil, (ushort)11);
        internal static uint JutilNoDeviceSelected = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryJutil, (ushort)12);
        internal static uint JutilDeprecatedCommand = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryJutil, (ushort)13);
        internal static uint JutilMultipleInstances = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryJutil, (ushort)14);
        internal static uint JutilBtedrTransportNotInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryJutil, (ushort)15);
        internal static uint JutilBtedrDiscoveryTimerNotInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryJutil, (ushort)16);
        internal static uint TimeNullArgument = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryTime, (ushort)0);
        internal static uint TimeInvalidArgument = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryTime, (ushort)1);
        internal static uint TimeTzInvalidBias = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryTime, (ushort)2);
        internal static uint TimeTzInvalidStandardDate = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryTime, (ushort)3);
        internal static uint TimeTzInvalidDaylightDate = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryTime, (ushort)4);
        internal static uint TimeSetDaylightAmbiguity = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryTime, (ushort)5);
        internal static uint TimeBadCategoryIndex = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryTime, (ushort)6);
        internal static uint TimeBadTimeZoneIndex = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryTime, (ushort)7);
        internal static uint TimeTzFileOperationInProgress = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryTime, (ushort)8);
        internal static uint TimeTzFileNameNotFound = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryTime, (ushort)9);
        internal static uint HRManagerSucceeded = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryHRManager, (ushort)0);
        internal static uint HRManagerNotInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryHRManager, (ushort)1);
        internal static uint HRManagerAlreadyInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryHRManager, (ushort)2);
        internal static uint HRManagerUnsupportedConfig = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryHRManager, (ushort)3);
        internal static uint HRManagerFifoOverflow = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryHRManager, (ushort)4);
        internal static uint ConfigurationSucceeded = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryConfiguration, (ushort)0);
        internal static uint ConfigurationFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryConfiguration, (ushort)1);
        internal static uint ConfigurationPflashReadOtpFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryConfiguration, (ushort)2);
        internal static uint ConfigurationPflashWriteOtpfailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryConfiguration, (ushort)3);
        internal static uint ConfigurationEflashInvalidHeader = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryConfiguration, (ushort)4);
        internal static uint ConfigurationEflashReadFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryConfiguration, (ushort)5);
        internal static uint ConfigurationEflashWriteFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryConfiguration, (ushort)6);
        internal static uint ConfigurationEraseFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryConfiguration, (ushort)7);
        internal static uint ConfigurationVerifyFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryConfiguration, (ushort)8);
        internal static uint ConfigurationModuleBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryConfiguration, (ushort)9);
        internal static uint ConfigurationInvalidKey = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryConfiguration, (ushort)10);
        internal static uint ConfigurationInvalidVersion = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryConfiguration, (ushort)11);
        internal static uint ConfigurationInvalidModule = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryConfiguration, (ushort)12);
        internal static uint ConfigurationInvalidRegister = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryConfiguration, (ushort)13);
        internal static uint ConfigurationInvalidRegisterSize = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryConfiguration, (ushort)14);
        internal static uint MotionTooFewSamplesAvailable = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMotion, (ushort)0);
        internal static uint MotionNullSubscription = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMotion, (ushort)1);
        internal static uint MotionBadSampleRate = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMotion, (ushort)2);
        internal static uint MotionNullFifoStorage = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMotion, (ushort)3);
        internal static uint MotionNullCallback = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMotion, (ushort)4);
        internal static uint MotionInsufficientFifoStorage = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMotion, (ushort)5);
        internal static uint MotionAlreadySubscribed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMotion, (ushort)6);
        internal static uint MotionSubscriptionNotFound = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMotion, (ushort)7);
        internal static uint MotionReusingFifoStorage = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMotion, (ushort)8);
        internal static uint MotionDeviceUnavailable = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMotion, (ushort)9);
        internal static uint MotionBadFifoElementSize = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMotion, (ushort)10);
        internal static uint MotionDeviceNotReady = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMotion, (ushort)11);
        internal static uint MotionPending = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryMotion, (ushort)12);
        internal static uint MotionDisabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMotion, (ushort)13);
        internal static uint MotionBadSampleType = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMotion, (ushort)14);
        internal static uint PegAlreadyEnabled = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryPeg, (ushort)0);
        internal static uint PegNotInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryPeg, (ushort)1);
        internal static uint PegCurrentlyEnabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryPeg, (ushort)2);
        internal static uint TouchNotInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryTouch, (ushort)0);
        internal static uint TouchNotConfigured = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryTouch, (ushort)1);
        internal static uint TouchBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryTouch, (ushort)2);
        internal static uint TouchWriteStarted = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryTouch, (ushort)3);
        internal static uint TouchWriteSuccessful = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryTouch, (ushort)4);
        internal static uint TouchSubscriptionDataValid = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryTouch, (ushort)5);
        internal static uint TouchQueueFull = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryTouch, (ushort)6);
        internal static uint TouchWriteEnqueued = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryTouch, (ushort)7);
        internal static uint TouchReadBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryTouch, (ushort)8);
        internal static uint TouchReadEnqueued = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryTouch, (ushort)9);
        internal static uint TouchAlreadyInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryTouch, (ushort)10);
        internal static uint MicrophonePending = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryMicrophone, (ushort)0);
        internal static uint MicrophoneEnabled = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryMicrophone, (ushort)1);
        internal static uint MicrophoneDisabled = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryMicrophone, (ushort)2);
        internal static uint MicrophoneNotInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMicrophone, (ushort)3);
        internal static uint MicrophoneBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMicrophone, (ushort)4);
        internal static uint MicrophoneAlreadyEnabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMicrophone, (ushort)5);
        internal static uint MicrophoneIllegalBuffer = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMicrophone, (ushort)6);
        internal static uint MicrophoneInsufficientSamples = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMicrophone, (ushort)7);
        internal static uint MicrophoneNotStopping = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMicrophone, (ushort)8);
        internal static uint MicrophoneBadBufferSize = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMicrophone, (ushort)9);
        internal static uint MicrophoneBadGainValue = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMicrophone, (ushort)10);
        internal static uint HrLedNotInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryHRLed, (ushort)0);
        internal static uint HrLedNotConfigured = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryHRLed, (ushort)1);
        internal static uint HrLedQueueFull = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryHRLed, (ushort)2);
        internal static uint HrLedWriteStarted = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryHRLed, (ushort)3);
        internal static uint HrLedSuccessful = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryHRLed, (ushort)4);
        internal static uint HrLedSubscriptionDataValid = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryHRLed, (ushort)5);
        internal static uint HrLedWriteEnqueued = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryHRLed, (ushort)6);
        internal static uint HrLedReadBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryHRLed, (ushort)7);
        internal static uint HrLedReadEnqueued = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryHRLed, (ushort)8);
        internal static uint HrLedWriteBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryHRLed, (ushort)9);
        internal static uint HrLedAlreadyInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryHRLed, (ushort)10);
        internal static uint GsrNotInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryGsr, (ushort)0);
        internal static uint GsrNotConfigured = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryGsr, (ushort)1);
        internal static uint GsrQueueFull = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryGsr, (ushort)2);
        internal static uint GsrWriteStarted = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryGsr, (ushort)3);
        internal static uint GsrSuccessful = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryGsr, (ushort)4);
        internal static uint GsrSubscriptionDataValid = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryGsr, (ushort)5);
        internal static uint GsrWriteEnqueued = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryGsr, (ushort)6);
        internal static uint GsrReadBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryGsr, (ushort)7);
        internal static uint GsrReadEnqueued = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryGsr, (ushort)8);
        internal static uint GsrAlreadyInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryGsr, (ushort)9);
        internal static uint UvNotInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUV, (ushort)0);
        internal static uint UvNotConfigured = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUV, (ushort)1);
        internal static uint UvQueueFull = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUV, (ushort)2);
        internal static uint UvWriteStarted = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryUV, (ushort)3);
        internal static uint UvSuccessful = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryUV, (ushort)4);
        internal static uint UvSubscriptionDataValid = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryUV, (ushort)5);
        internal static uint UvWriteEnqueued = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryUV, (ushort)6);
        internal static uint UvReadBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUV, (ushort)7);
        internal static uint UvReadEnqueued = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryUV, (ushort)8);
        internal static uint UvAlreadyInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUV, (ushort)9);
        internal static uint SkinTempNotInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySkinTemp, (ushort)0);
        internal static uint SkinTempNotConfigured = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySkinTemp, (ushort)1);
        internal static uint SkinTempQueueFull = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySkinTemp, (ushort)2);
        internal static uint SkinTempWriteStarted = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibrarySkinTemp, (ushort)3);
        internal static uint SkinTempSuccessful = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibrarySkinTemp, (ushort)4);
        internal static uint SkinTempSubscriptionDataValid = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibrarySkinTemp, (ushort)5);
        internal static uint SkinTempWriteEnqueued = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibrarySkinTemp, (ushort)6);
        internal static uint SkinTempReadBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySkinTemp, (ushort)7);
        internal static uint SkinTempReadEnqueued = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibrarySkinTemp, (ushort)8);
        internal static uint SkinTempAlreadyInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySkinTemp, (ushort)9);
        internal static uint AmbTempNotInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryAmbTemp, (ushort)0);
        internal static uint AmbTempNotConfigured = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryAmbTemp, (ushort)1);
        internal static uint AmbTempQueueFull = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryAmbTemp, (ushort)2);
        internal static uint AmbTempWriteStarted = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryAmbTemp, (ushort)3);
        internal static uint AmbTempSuccessful = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryAmbTemp, (ushort)4);
        internal static uint AmbTempSubscriptionDataValid = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryAmbTemp, (ushort)5);
        internal static uint AmbTempWriteEnqueued = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryAmbTemp, (ushort)6);
        internal static uint AmbTempReadBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryAmbTemp, (ushort)7);
        internal static uint AmbTempReadEnqueued = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryAmbTemp, (ushort)8);
        internal static uint AmbTempAlreadyInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryAmbTemp, (ushort)9);
        internal static uint PedometerFifoOverflow = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryPedometer, (ushort)0);
        internal static uint AlgoMathInitializeSucceeded = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryAlgoMath, (ushort)0);
        internal static uint AlgoMathInitializeFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryAlgoMath, (ushort)1);
        internal static uint AlgoMathBadMatrix = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryAlgoMath, (ushort)2);
        internal static uint AlgoMathMathError = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryAlgoMath, (ushort)3);
        internal static uint DataLoggerPending = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryLogger, (ushort)0);
        internal static uint DataLoggerEndOfLog = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryLogger, (ushort)1);
        internal static uint DataLoggerBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryLogger, (ushort)2);
        internal static uint DataLoggerRecordTooLarge = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryLogger, (ushort)3);
        internal static uint DataLoggerIsDisabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryLogger, (ushort)4);
        internal static uint DataLoggerIsActive = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryLogger, (ushort)5);
        internal static uint DataLoggerIsCorrupt = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryLogger, (ushort)6);
        internal static uint DataLoggerPastLogEnd = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryLogger, (ushort)7);
        internal static uint DataLoggerReadPastChunkEnd = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryLogger, (ushort)8);
        internal static uint DataLoggerChunkNotRead = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryLogger, (ushort)9);
        internal static uint DataLoggerFlashOpInProgress = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryLogger, (ushort)10);
        internal static uint DataLoggerBadChunkCount = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryLogger, (ushort)11);
        internal static uint DataLoggerBadGetMetadataState = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryLogger, (ushort)12);
        internal static uint DataLoggerBadChunkDeleteState = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryLogger, (ushort)13);
        internal static uint DataLoggerBadBufferWriteCount = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryLogger, (ushort)14);
        internal static uint DataLoggerBadWriteBufferAvailable = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryLogger, (ushort)15);
        internal static uint DataLoggerBadBufferBusyState = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryLogger, (ushort)16);
        internal static uint DataLoggerBadWriteBufferState = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryLogger, (ushort)17);
        internal static uint DataLoggerTooManyCallbacks = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryLogger, (ushort)18);
        internal static uint DataLoggerCrcFail = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryLogger, (ushort)19);
        internal static uint DataLoggerDupFlashOpStruct = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryLogger, (ushort)20);
        internal static uint DataLoggerBadFlashOp = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryLogger, (ushort)21);
        internal static uint DataLoggerFlashGeometryBad = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryLogger, (ushort)22);
        internal static uint DataLoggerBadChunkAddress = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryLogger, (ushort)23);
        internal static uint GpsHibernating = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryGps, (ushort)0);
        internal static uint GpsNotPatched = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryGps, (ushort)1);
        internal static uint GpsCommandArgumentLengthError = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryGps, (ushort)2);
        internal static uint GpsInvalidSatelliteId = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryGps, (ushort)3);
        internal static uint GpsInvalidTestMode = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryGps, (ushort)4);
        internal static uint GpsBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryGps, (ushort)5);
        internal static uint GpsUnableToEnableOrDisable = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryGps, (ushort)6);
        internal static uint GpsIsEnabled = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryGps, (ushort)7);
        internal static uint GpsIsDisabled = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryGps, (ushort)8);
        internal static uint FilePending = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryFile, (ushort)0);
        internal static uint FileFileStructInUse = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFile, (ushort)1);
        internal static uint FileFileAlreadyOpen = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFile, (ushort)2);
        internal static uint FileFileNotOpen = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFile, (ushort)3);
        internal static uint FileOperationPending = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFile, (ushort)4);
        internal static uint FileSizeBeyondMaxForFile = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFile, (ushort)5);
        internal static uint FileSeekError = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFile, (ushort)6);
        internal static uint FileNotOpenForWrite = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFile, (ushort)7);
        internal static uint FileInvalidFile = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFile, (ushort)8);
        internal static uint FileSizeMismatch = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFile, (ushort)9);
        internal static uint FileBacklogOverflow = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFile, (ushort)10);
        internal static uint FileBadFileAdress = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFile, (ushort)11);
        internal static uint FileFatTableMismatch = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFile, (ushort)12);
        internal static uint FileBadFileSizeSpecified = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFile, (ushort)13);
        internal static uint FileTooLittleFlashLeft = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFile, (ushort)14);
        internal static uint FileTooManyFilesDefined = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFile, (ushort)15);
        internal static uint FileNumberOfFilesDecreased = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFile, (ushort)16);
        internal static uint FileNullStructurePointer = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFile, (ushort)17);
        internal static uint FileBadFileIndex = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFile, (ushort)18);
        internal static uint FileStructOnStack = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFile, (ushort)19);
        internal static uint FileBadFileType = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFile, (ushort)20);
        internal static uint FileNullBufferPointer = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFile, (ushort)21);
        internal static uint FileBadSeekOrigin = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFile, (ushort)22);
        internal static uint RemoteSubscriptionInvalidArg = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryRemoteSubscription, (ushort)0);
        internal static uint RemoteSubscriptionPushServiceInUse = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryRemoteSubscription, (ushort)1);
        internal static uint BluetoothInvalidArg = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBTPS, (ushort)756);
        internal static uint BluetoothSendFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBTPS, (ushort)757);
        internal static uint BluetoothSendPending = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryBTPS, (ushort)758);
        internal static uint BluetoothHciRawCommandFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBTPS, (ushort)759);
        internal static uint BluetoothBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBTPS, (ushort)760);
        internal static uint BluetoothExitSleepPending = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryBTPS, (ushort)761);
        internal static uint BluetoothChipAsleep = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBTPS, (ushort)762);
        internal static uint BluetoothDisabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBTPS, (ushort)763);
        internal static uint BluetoothHwIncompatible = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBTPS, (ushort)764);
        internal static uint BluetoothAlreadyInState = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryBTPS, (ushort)765);
        internal static uint BluetoothLinkKeyNotFound = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBTPS, (ushort)766);
        internal static uint BluetoothDisconnectPending = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryBTPS, (ushort)767);
        internal static uint BluetoothDisconnetAlreadyInProgress = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBTPS, (ushort)768);
        internal static uint BluetoothNotConnected = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBTPS, (ushort)769);
        internal static uint BluetoothDisconnectTimedOut = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBTPS, (ushort)770);
        internal static uint BluetoothBandwidthExceeded = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBTPS, (ushort)771);
        internal static uint BluetoothRetryPending = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibraryBTPS, (ushort)772);
        internal static uint BluetoothWpnsPerformingOverflow = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBTPS, (ushort)1024);
        internal static uint BluetoothWpnsInvalidPacket = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBTPS, (ushort)1025);
        internal static uint BluetoothSdpuInvalidSize = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBTPS, (ushort)1792);
        internal static uint BluetoothSdpuInvalidSequHeader = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBTPS, (ushort)1793);
        internal static uint BluetoothSdpuInvalidElinoNotFound = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBTPS, (ushort)1794);
        internal static uint BluetoothSdpuInvalidPidNotFound = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBTPS, (ushort)1795);
        internal static uint BluetoothSdpuPidTooLong = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBTPS, (ushort)1796);
        internal static uint BluetoothUnitTestFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBTPS, (ushort)2048);
        internal static uint BluetoothEnableNotAllowed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryBTPS, (ushort)2304);
        internal static uint MinuteTimerAlreadySubscribed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMinuteTimer, (ushort)0);
        internal static uint MinuteTimerSubscriptionNotFound = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMinuteTimer, (ushort)1);
        internal static uint MinuteTimerSubscriptionRemoveFail = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryMinuteTimer, (ushort)2);
        internal static uint SubscriptionBaseListRemovalError = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySubscriptionBase, (ushort)0);
        internal static uint SubscriptionBaseRecursiveNotification = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySubscriptionBase, (ushort)1);
        internal static uint SubscriptionBaseInvalidRemovedNotification = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySubscriptionBase, (ushort)2);
        internal static uint SubscriptionBaseBadPointer = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySubscriptionBase, (ushort)3);
        internal static uint SubscriptionBaseNullPointer = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySubscriptionBase, (ushort)4);
        internal static uint SubscriptionBaseSubscriptionNotInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySubscriptionBase, (ushort)5);
        internal static uint AlgorithmsRecoveryProfileInvalidInput = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryRecovery, (ushort)0);
        internal static uint AlgorithmsRecoveryProfileInvalidMaxHrOrMaxMet = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryRecovery, (ushort)1);
        internal static uint USBConnectionReinitialization = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUSBConnection, (ushort)0);
        internal static uint USBConnectionAlreadyStarted = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryUSBConnection, (ushort)1);
        internal static uint SramFwUpdateBootIntoUpdateMode = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibrarySRAMFWUpdate, (ushort)0);
        internal static uint SramFwUpdateResetReasonSRAMUpdateSuccess = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.LibrarySRAMFWUpdate, (ushort)1);
        internal static uint SramFwUpdateResetReasonSRAMTimeout = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySRAMFWUpdate, (ushort)2);
        public static uint SramFwUpdateBatteryTooLow = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySRAMFWUpdate, (ushort)3);
        internal static uint SramFwUpdateFileWriteFailure = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySRAMFWUpdate, (ushort)4);
        internal static uint SramFwUpdateFileWriteRequestFailure = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySRAMFWUpdate, (ushort)5);
        internal static uint SramFwUpdateFileCrcMismatch = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySRAMFWUpdate, (ushort)6);
        internal static uint SramFwUpdateFileVersionReadFailure = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySRAMFWUpdate, (ushort)7);
        internal static uint SramFwUpdateFileVersionRequestFailure = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySRAMFWUpdate, (ushort)8);
        internal static uint SramFwUpdate2upCrcMismatch = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySRAMFWUpdate, (ushort)9);
        internal static uint SramFwUpdateAppCrcMismatch = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySRAMFWUpdate, (ushort)10);
        internal static uint SramFwUpdateBlobCrcMismatch = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySRAMFWUpdate, (ushort)11);
        internal static uint SramFwUpdateAppNotFound = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySRAMFWUpdate, (ushort)12);
        internal static uint SramFwUpdateFileOpenRequestFailure = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySRAMFWUpdate, (ushort)13);
        internal static uint SramFwUpdateFileOpenFailure = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySRAMFWUpdate, (ushort)14);
        internal static uint SramFwUpdateFileCloseRequestFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySRAMFWUpdate, (ushort)15);
        internal static uint SramFwUpdateFileCloseFailure = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySRAMFWUpdate, (ushort)16);
        internal static uint SramFwUpdateBlobPcbIdMismatch = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibrarySRAMFWUpdate, (ushort)17);
        internal static uint DateChangeSubscriptionAlreadyInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryDateChangeSubscription, (ushort)0);
        internal static uint DateChangeSubscriptionNotInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryDateChangeSubscription, (ushort)1);
        internal static uint HapticInvalidStreamId = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryHaptic, (ushort)0);
        internal static uint FitnessPlansUnableToOpenFile = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFitnessPlans, (ushort)0);
        internal static uint FitnessPlansFileReadError = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFitnessPlans, (ushort)1);
        internal static uint FitnessPlansCorruptFile = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFitnessPlans, (ushort)2);
        internal static uint FitnessPlansVersionMismatch = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFitnessPlans, (ushort)3);
        internal static uint FitnessPlansCrcAssumptionBroken = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFitnessPlans, (ushort)4);
        internal static uint FitnessPlansOutOfMemory = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFitnessPlans, (ushort)5);
        internal static uint FitnessPlansInvalidFileFormat = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFitnessPlans, (ushort)6);
        internal static uint FitnessPlansBadArgument = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFitnessPlans, (ushort)7);
        internal static uint FitnessPlansNoElementsAvailable = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFitnessPlans, (ushort)8);
        internal static uint FitnessPlansEndOfData = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFitnessPlans, (ushort)9);
        internal static uint FitnessPlansWorkoutAlreadyStored = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFitnessPlans, (ushort)10);
        internal static uint FitnessPlansWorkoutNotStarted = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFitnessPlans, (ushort)11);
        internal static uint FitnessPlansPreviousRequestStillActive = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFitnessPlans, (ushort)12);
        internal static uint FitnessPlansWorkoutAlreadyLoaded = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFitnessPlans, (ushort)13);
        internal static uint FitnessPlansWorkoutNotLoaded = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFitnessPlans, (ushort)14);
        internal static uint FitnessPlanInvalidCompletionType = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFitnessPlans, (ushort)15);
        internal static uint FitnessPlanExerciseTimeTooShort = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryFitnessPlans, (ushort)16);
        internal static uint AncsNotificationCacheUnitTestFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryAncsNotificationCache, (ushort)0);
        internal static uint AncsNotificationCacheAlreadyInCache = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.LibraryAncsNotificationCache, (ushort)1);
        internal static uint FireballUiInvalidParameterSize = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballUI, (ushort)0);
        internal static uint FireballUiInvalidScreenId = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballUI, (ushort)1);
        internal static uint FireballUiNavigationDisabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballUI, (ushort)2);
        internal static uint FireballUiInvalidBufferSize = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballUI, (ushort)3);
        internal static uint FireballUiNoMeTileImage = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballUI, (ushort)4);
        internal static uint FireballUiMeTileImageNotAvailable = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballUI, (ushort)5);
        internal static uint FireballUiMeTileWriteInProgress = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballUI, (ushort)6);
        internal static uint FireballUiSyncInProgress = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballUI, (ushort)7);
        internal static uint FireballListTailNoHead = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballUtilities, (ushort)0);
        internal static uint FireballListHeadNoTail = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballUtilities, (ushort)1);
        internal static uint FireballListTailHasNext = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballUtilities, (ushort)2);
        internal static uint FireballListParamNull = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballUtilities, (ushort)3);
        internal static uint FireballListListEmpty = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.ModuleFireballUtilities, (ushort)4);
        internal static uint FireballListElementNotPresent = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballUtilities, (ushort)5);
        internal static uint ProfileNotInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleProfile, (ushort)0);
        internal static uint ProfileReinitialization = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleProfile, (ushort)1);
        internal static uint ProfileFileSizeMismatch = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleProfile, (ushort)2);
        internal static uint ProfileFileBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleProfile, (ushort)3);
        internal static uint ProfileUnsupportedVersion = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleProfile, (ushort)4);
        internal static uint ProfileInvalidValue = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleProfile, (ushort)5);
        internal static uint ProfileTelemetryDisallowed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleProfile, (ushort)6);
        internal static uint LoggerSubscriptionsInvalidArg = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleLoggerSubscriptions, (ushort)0);
        internal static uint PowerManagerReinitialization = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)0);
        internal static uint PowerManagerPowerOffDisallowed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)1);
        internal static uint PowerManagerAlreadyEnteredRunMode = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)2);
        internal static uint PowerManagerAlreadyExitedRunMode = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)3);
        internal static uint PowerManagerAlreadyEnabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)4);
        internal static uint PowerManagerAlreadyDisabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)5);
        internal static uint PowerManagerDisabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)6);
        internal static uint PowerManagerEnabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)7);
        internal static uint PowerManagerDisplayMgmtDisabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)8);
        internal static uint PowerManagerDisplayMgmtEnabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)9);
        internal static uint PowerManagerBacklightMgmtDisabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)10);
        internal static uint PowerManagerBacklightMgmtEnabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)11);
        internal static uint PowerManagerTouchMgmtDisabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)12);
        internal static uint PowerManagerTouchMgmtEnabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)13);
        internal static uint PowerManagerHrMgmtDisabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)14);
        internal static uint PowerManagerHrMgmtEnabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)15);
        internal static uint PowerManagerAlreadyEnteredOobeMode = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)16);
        internal static uint PowerManagerAlreadyExitedOobeMode = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)17);
        internal static uint PowerManagerAlreadyEnteredSleepMode = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)18);
        internal static uint PowerManagerAlreadyExitedSleepMode = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)19);
        internal static uint PowerManagerInvalidModuleId = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)20);
        internal static uint PowerManagerInvalidModuleState = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)21);
        internal static uint PowerManagerInvalidPowerMode = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)22);
        internal static uint PowerManagerInvalidTransition = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)23);
        internal static uint PowerManagerShutdownAlreadyInProgress = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)24);
        internal static uint PowerManagerDimmingDisabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)25);
        internal static uint PowerManagerDimmingEnabled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)26);
        internal static uint PowerManagerResetReasonFailedBatteryKill = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)27);
        internal static uint PowerManagerUnitTestFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)28);
        internal static uint PowerManagerBiometricSensorsAlreadyOn = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)29);
        internal static uint PowerManagerBiometricSensorsAlreadyOff = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)30);
        internal static uint PowerManagerGenericCleanReset = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)31);
        internal static uint PowerManagerHardRequirementsStackFull = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePowerManager, (ushort)50);
        internal static uint HrPowerManagerReinitialization = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleHrPowerManager, (ushort)0);
        internal static uint HrPowerManagerUnitTestFailure = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleHrPowerManager, (ushort)1);
        internal static uint FireballHardwareManagerBtAlreadySubscribed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballTilesModels, (ushort)0);
        internal static uint FireballHardwareManagerBtNotSubscribed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballTilesModels, (ushort)1);
        internal static uint SystemSettingsOperationNotImplemented = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleSystemSettings, (ushort)0);
        internal static uint SystemSettingsOperationNotStarted = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleSystemSettings, (ushort)1);
        internal static uint SystemSettingsOperationBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleSystemSettings, (ushort)2);
        internal static uint SystemSettingsOperationRetrying = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.ModuleSystemSettings, (ushort)0);
        internal static uint SystemSettingsResetReasonFactoryReset = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.ModuleSystemSettings, (ushort)1);
        internal static uint SystemSettingsStageSkipped = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.ModuleSystemSettings, (ushort)2);
        internal static uint NotificationInvalidNotificationType = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleNotification, (ushort)0);
        internal static uint NotificationAddFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleNotification, (ushort)1);
        internal static uint NotificationRemoveFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleNotification, (ushort)2);
        internal static uint NotificationRemoveAllFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleNotification, (ushort)3);
        internal static uint NotificationInitializationFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleNotification, (ushort)4);
        internal static uint NotificationCleanUpFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleNotification, (ushort)5);
        internal static uint NotificationUnitTestAppNotInstalled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleNotification, (ushort)6);
        internal static uint NotificationUnitTestFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleNotification, (ushort)7);
        internal static uint NotificationUnitTestDialogFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleNotification, (ushort)8);
        internal static uint NotificationUnitTestBadgeFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleNotification, (ushort)9);
        internal static uint NotificationGenericBadData = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleNotification, (ushort)100);
        internal static uint NotificationGenericBufferReadPosition = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleNotification, (ushort)101);
        internal static uint NotificationGenericDataBadType = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleNotification, (ushort)102);
        internal static uint NotificationGenericDataBadId = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleNotification, (ushort)103);
        internal static uint NotificationGenericDataBadValue = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleNotification, (ushort)104);
        internal static uint NotificationMultipleSubscribersNotSupported = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleNotification, (ushort)65533);
        internal static uint NotificationNotSupported = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleNotification, (ushort)65534);
        internal static uint NotificationError = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleNotification, ushort.MaxValue);
        internal static uint InstrumentationInvalidIndex = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleInstrumentation, (ushort)0);
        internal static uint InstrumentationModuleUnintialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleInstrumentation, (ushort)1);
        internal static uint InstrumentationModuleIsBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleInstrumentation, (ushort)2);
        internal static uint InstrumentationUnusedIndex = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleInstrumentation, (ushort)3);
        internal static uint PalInvalidServiceIndex = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePal, (ushort)1);
        internal static uint FtlTouchManagerGestureSubscriberNotFound = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFtlTouchManager, (ushort)0);
        internal static uint FtlTouchManagerGestureSubscriberRemovalError = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFtlTouchManager, (ushort)1);
        internal static uint PersistedStatisticsNotInitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePersistedStatistics, (ushort)0);
        internal static uint PersistedStatisticsFileIoBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePersistedStatistics, (ushort)1);
        internal static uint PersistedStatisticsInvalidFileSize = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePersistedStatistics, (ushort)2);
        internal static uint PersistedStatisticsInvalidBufferSize = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePersistedStatistics, (ushort)3);
        internal static uint PersistedApplicationDataFileIoBusy = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePersistedApplicationData, (ushort)0);
        internal static uint PersistedApplicationDataInvalidMetricData = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModulePersistedApplicationData, (ushort)1);
        internal static uint CortanaNotImplemented = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleCortana, (ushort)0);
        internal static uint CortanaInvalidParameter = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleCortana, (ushort)1);
        internal static uint CortanaNotAvailable = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleCortana, (ushort)2);
        internal static uint CortanaNotRunning = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleCortana, (ushort)3);
        internal static uint CortanaButtonActivated = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.ModuleCortana, (ushort)4);
        internal static uint CortanaButtonRelease = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.ModuleCortana, (ushort)5);
        internal static uint CortanaNotificationSuccess = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.ModuleCortana, (ushort)6);
        internal static uint CortanaNotificationError = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleCortana, (ushort)7);
        internal static uint CortanaNotificationMore = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.ModuleCortana, (ushort)8);
        internal static uint CortanaVoicePushStarted = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.ModuleCortana, (ushort)9);
        internal static uint CortanaNotificationTimeout = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.ModuleCortana, (ushort)10);
        internal static uint CortanaNotificationMessage = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.ModuleCortana, (ushort)11);
        internal static uint FireballAppsManagementInvalidOrCorruptAsset = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballAppsManagement, (ushort)0);
        internal static uint FireballAppsManagementCorruptLayout = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballAppsManagement, (ushort)1);
        internal static uint FireballAppsManagementTooManyApps = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballAppsManagement, (ushort)2);
        public static uint FireballAppsManagementAppIdNotFound = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballAppsManagement, (ushort)3);
        internal static uint FireballAppsManagementNoResourcesProvided = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballAppsManagement, (ushort)4);
        internal static uint FireballAppsManagementWriteAlreadyExists = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballAppsManagement, (ushort)5);
        internal static uint FireballAppsManagementAppAlreadyExists = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballAppsManagement, (ushort)6);
        internal static uint FireballAppsManagementCannotModifyNativeIcons = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballAppsManagement, (ushort)7);
        internal static uint FireballAppsManagementInvalidTileIconIndex = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballAppsManagement, (ushort)8);
        internal static uint FireballAppsManagementTilesNotYetLoaded = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleFireballAppsManagement, (ushort)9);
        internal static uint BatteryGaugeAlreadyInstalled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleBatteryGauge, (ushort)0);
        internal static uint UnitTestsInvalidTestId = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleUnitTests, (ushort)0);
        internal static uint InstalledAncsAppListFull = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleInstalledAppList, (ushort)0);
        internal static uint InstalledAncsAppNameLengthIllegal = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleInstalledAppList, (ushort)1);
        internal static uint InstalledAncsAppNotRegistered = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleInstalledAppList, (ushort)2);
        internal static uint InstalledAncsAppListEmpty = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleInstalledAppList, (ushort)3);
        internal static uint InstalledAncsFreshListInitialization = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.ModuleInstalledAppList, (ushort)4);
        internal static uint InstalledAncsDuplicateNameEntry = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleInstalledAppList, (ushort)5);
        internal static uint InstalledAncsDuplicateGuidEntry = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleInstalledAppList, (ushort)6);
        internal static uint InstalledAncsAppListUnitTestFailed = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleInstalledAppList, (ushort)7);
        internal static uint InstalledAncsAppListUninitialized = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleInstalledAppList, (ushort)8);
        internal static uint InstalledAppListInvalidParameter = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleInstalledAppList, (ushort)9);
        internal static uint InstalledAppListAppNotFound = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleInstalledAppList, (ushort)10);
        internal static uint InstalledAppListListFull = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleInstalledAppList, (ushort)11);
        internal static uint InstalledAppListAppIdNotFound = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleInstalledAppList, (ushort)12);
        internal static uint InstalledAppListPageIndexInvalid = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleInstalledAppList, (ushort)13);
        internal static uint InstalledAppListPageLayoutFormatInvalid = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleInstalledAppList, (ushort)14);
        internal static uint KFrostSessionAlreadyRunning = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleKfrost, (ushort)0);
        internal static uint KFrostTestNotRunning = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleKfrost, (ushort)1);
        internal static uint KFrostInvalidArgs = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleKfrost, (ushort)2);
        internal static uint KFrostUsbParamsNotLoaded = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleKfrost, (ushort)3);
        internal static uint KFrostUsbNoRunFlags = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleKfrost, (ushort)4);
        internal static uint KFrostUsbParamInvalidFile = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleKfrost, (ushort)5);
        internal static uint KFrostUsbAllocFail = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleKfrost, (ushort)6);
        internal static uint KFrostNotPresent = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleKfrost, (ushort)7);
        internal static uint KFrostInvalidId = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleKfrost, (ushort)8);
        internal static uint KFrostOutOfBounds = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleKfrost, (ushort)9);
        internal static uint VoicePushMic = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.ModuleVoicePush, (ushort)0);
        internal static uint VoicePushMicOffPushInProgress = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.ModuleVoicePush, (ushort)1);
        internal static uint VoicePushPushComplete = DeviceStatusCodeUtils.MakeStatusCust(false, Facility.ModuleVoicePush, (ushort)2);
        internal static uint VoicePushCancelled = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleVoicePush, (ushort)3);
        internal static uint VoicePushAlreadyInProgress = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleVoicePush, (ushort)4);
        internal static uint VoicePushNotInProgress = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleVoicePush, (ushort)5);
        internal static uint VoicePushServiceNotAvailable = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleVoicePush, (ushort)6);
        internal static uint VoicePushAirplaneMode = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleVoicePush, (ushort)7);
        internal static uint VoicePushStopInProgress = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleVoicePush, (ushort)8);
        internal static uint VoicePushCancelInProgress = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ModuleVoicePush, (ushort)9);
        internal static uint AppMainResetReasonFailedInitialization = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.ApplicationsBase, (ushort)0);
        internal static uint App2UpResetReasonSramUpdateComplete = DeviceStatusCodeUtils.MakeStatusCust(true, Facility.Application2UP, (ushort)0);

        internal static bool IsSeverityError(uint status) => DeviceStatusCodeUtils.IsSeverityError(status);
    }
}
